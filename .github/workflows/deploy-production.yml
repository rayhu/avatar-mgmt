# .github/workflows/deploy-production.yml
name: Deploy to Production
on:
  release:
    types: [published]

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    steps:
      - name: Get Release Info
        id: release
        run: |
          echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "release_name=${{ github.event.release.name }}" >> $GITHUB_OUTPUT
          echo "release_body=${{ github.event.release.body }}" >> $GITHUB_OUTPUT
          
      - name: Deploy to Production
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ vars.PRODUCTION_HOST }}
          username: ${{ vars.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            echo "üöÄ Starting Production deployment..."
            echo "Target: ${{ vars.PRODUCTION_HOST }}"
            echo "User: ${{ vars.PRODUCTION_USERNAME }}"
            echo "Release: ${{ steps.release.outputs.release_name }}"
            echo "Repository: ${{ github.repository }}"
            echo "Tag: ${{ steps.release.outputs.tag_name }}"
            echo "Commit: ${{ github.sha }}"
            echo "Deploy time: $(date)"

            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            sudo mkdir -p /opt/avatar-mgmt2
            sudo chown $USER:$USER /opt/avatar-mgmt2
            sudo chmod 755 /opt/avatar-mgmt2

            cd /opt/avatar-mgmt2
            
            # Ê£ÄÊü•Âπ∂ÂàùÂßãÂåñ Git ‰ªìÂ∫ì
            if [ ! -d ".git" ]; then
              echo " Git repository not found, cloning..."
              ssh-keyscan -H github.com >> ~/.ssh/known_hosts
              git clone git@github.com:${{ github.repository }}.git .
              if [ $? -ne 0 ]; then
                echo "‚ùå Failed to clone repository"
                exit 1
              fi
              echo "‚úÖ Repository cloned successfully"
            else
              echo "üì• Git repository found, updating..."
              # Â§á‰ªΩÂΩìÂâçÁâàÊú¨
              if git rev-parse HEAD >/dev/null 2>&1; then
                echo " Backing up current version..."
                git rev-parse HEAD > .backup-commit.txt
              fi
              
              # ÊãâÂèñÊúÄÊñ∞‰ª£Á†ÅÂíåÊ†áÁ≠æ
              echo "üì• Pulling latest code and tags..."
              git fetch --all --tags
              
              # ÊòæÁ§∫ÂèØÁî®Ê†áÁ≠æ
              echo "üè∑Ô∏è Available tags:"
              git tag -l | tail -5
              
              # Âº∫Âà∂ÂàáÊç¢Âà∞ÊåáÂÆöÊ†áÁ≠æÔºàÂà†Èô§ÊâÄÊúâÊú¨Âú∞‰øÆÊîπÔºâ
              echo "üîÑ Force switching to tag: ${{ steps.release.outputs.tag_name }}"
              git checkout --force ${{ steps.release.outputs.tag_name }}
              
              # È™åËØÅÂΩìÂâçÁä∂ÊÄÅ
              echo "üìä Current git status:"
              git log --oneline -3
              echo "üè∑Ô∏è Current tag: $(git describe --tags --exact-match 2>/dev/null || echo 'Not on exact tag')"
              
              # Ê∏ÖÁêÜÁîüÊàêÁöÑÊñá‰ª∂Ôºà‰øùÁïôÈÖçÁΩÆÊñá‰ª∂Ôºâ
              echo "üßπ Cleaning generated files..."
              git clean -fd frontend/ api-server/ scripts/ || true
            fi
            
            sudo chown -R $USER:$USER /opt/avatar-mgmt2
    
            # Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂
            if [ ! -f ".env.prod.api" ]; then
              echo "‚ùå Production config file not found!"
              echo "Please create .env.prod.api on the server"
              exit 1
            fi
            if [ ! -f ".env.prod.directus" ]; then
              echo "‚ùå Production config file not found!"
              echo "Please create .env.prod.directus on the server"
              exit 1
            fi

            # Á°Æ‰øù Volta Â∑≤ÂÆâË£ÖÂπ∂Âä†ËΩΩ
            if ! command -v volta &> /dev/null; then
              echo " Installing Volta..."
              curl https://get.volta.sh | bash
              export VOLTA_HOME="$HOME/.volta"
              export PATH="$VOLTA_HOME/bin:$PATH"
            fi
            
            
            # Âä†ËΩΩ Volta ÁéØÂ¢É
            export VOLTA_HOME="$HOME/.volta"
            export PATH="$VOLTA_HOME/bin:$PATH"
            
            # ÂÆâË£ÖÈ°πÁõÆÊåáÂÆöÁöÑ Node.js Âíå Yarn ÁâàÊú¨
            echo " Installing Node.js and Yarn via Volta..."
            volta install node@22.16.0
            volta install yarn@1.22.22
            
            # È™åËØÅÁâàÊú¨
            echo " Verifying versions..."
            node --version
            yarn --version

            # Âú®ÊúçÂä°Âô®‰∏äÊûÑÂª∫ÂâçÁ´Ø
            echo "ÔøΩÔøΩÔ∏è Building frontend on server..."
            cd frontend
            
            # ËÆæÁΩÆ production ÁéØÂ¢ÉÂèòÈáè
            echo "VITE_API_BASE_URL=https://api.${{ vars.PRODUCTION_HOST }}" > .env.production
            echo "VITE_DIRECTUS_BASE_URL=https://directus.${{ vars.PRODUCTION_HOST }}" >> .env.production
            # Ê≥®ÊÑèÔºö‰∏çË¶ÅËÆæÁΩÆ NODE_ENVÔºåVite ‰ºöÊ†πÊçÆ --mode production Ëá™Âä®ËÆæÁΩÆ
            
            # ÂÆâË£Ö‰æùËµñÂπ∂ÊûÑÂª∫
            yarn install --frozen-lockfile
            yarn build --mode production
                        
            cd ..
            
            # Âú®ÊúçÂä°Âô®‰∏äÂÆâË£ÖÂêéÁ´Ø‰æùËµñ
            echo "ÔøΩÔøΩ Installing backend dependencies..."
            cd api-server
            yarn install --frozen-lockfile
            cd ..
            

            # ÁîüÊàêÁâàÊú¨‰ø°ÊÅØ
            echo " Generating version information..."
            chmod +x scripts/generate-version.sh
            ./scripts/generate-version.sh prod

            # ÈÉ®ÁΩ≤Áîü‰∫ßÁéØÂ¢É
            echo "üê≥ Starting production services..."
            sudo docker compose -f docker-compose.prod.yml up -d --build --force-recreate --remove-orphans
            
            echo "‚úÖ Production deployment completed!"
            
      - name: Production health check
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ vars.PRODUCTION_HOST }}
          username: ${{ vars.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/avatar-mgmt2
            echo "üîç Starting production health check..."
            
            # Á≠âÂæÖÊúçÂä°ÂêØÂä®
            echo "‚è≥ Waiting for services to start..."
            sleep 60
            
            # Ê£ÄÊü• Docker ÊúçÂä°Áä∂ÊÄÅ
            echo "üìä Docker services status:"
            sudo docker compose -f docker-compose.prod.yml ps
            
            # Ê£ÄÊü•ÊúçÂä°ÂÅ•Â∫∑Áä∂ÊÄÅ
            echo "üè• Checking service health..."
            
            # Ê£ÄÊü•ÂâçÁ´ØÊúçÂä°
            if curl -f https://${{ vars.PRODUCTION_HOST }} > /dev/null 2>&1; then
              echo "‚úÖ Frontend service is healthy"
            else
              echo "‚ùå Frontend service health check failed"
              exit 1
            fi
            
            # Ê£ÄÊü• API ÊúçÂä°
            if curl -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "‚úÖ API service is healthy (internal)"
            else
              echo "‚ùå API service health check failed (internal)"
              exit 1
            fi
            
            # Ê£ÄÊü• Directus ÊúçÂä° (ÂÜÖÈÉ®)
            if curl -f http://localhost:8055/ > /dev/null 2>&1; then
              echo "‚úÖ Directus service is healthy (internal)"
            else
              echo "‚ùå Directus service health check failed (internal)"
              exit 1
            fi
            
            # Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÊúçÂä°
            if sudo docker compose -f docker-compose.prod.yml exec -T db pg_isready -U directus > /dev/null 2>&1; then
              echo "‚úÖ Database service is healthy"
            else
              echo "‚ùå Database service health check failed"
              exit 1
            fi
            
            echo "üéâ All production services are healthy!"
            
      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Production deployment successful!"
          echo "Repository: ${{ github.repository }}"
          echo "Tag: ${{ steps.release.outputs.tag_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deploy time: $(date)"
          echo "Release notes: ${{ steps.release.outputs.release_body }}"
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          echo "Repository: ${{ github.repository }}"
          echo "Release: ${{ steps.release.outputs.release_name }}"
          echo "Tag: ${{ steps.release.outputs.tag_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deploy time: $(date)"
          echo "Please check the deployment logs and fix the issue."
