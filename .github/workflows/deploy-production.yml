# .github/workflows/deploy-production.yml
name: Deploy to Production
on:
  workflow_run:
    workflows: ['Build and Push Docker Images']
    types:
      - completed
    branches: [main] # 监听main分支的 release

jobs:
  deploy-production:
    # 只在构建工作流成功完成且为正式 release（非 pre-release）时执行
    if: github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.event == 'release' &&
      github.event.workflow_run.head_repository.full_name == github.repository

    runs-on: ubuntu-latest
    steps:
      - name: Get release information
        id: release
        run: |
          # 从所有 releases 获取信息，按时间排序
          ALL_RELEASES=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.event.workflow_run.repository.full_name }}/releases")

          # 获取最新的 release（包括 pre-release）
          LATEST_RELEASE=$(echo "$ALL_RELEASES" | jq -r '.[0]')

          IS_PRERELEASE=$(echo "$LATEST_RELEASE" | jq -r '.prerelease')
          RELEASE_TAG=$(echo "$LATEST_RELEASE" | jq -r '.tag_name')
          RELEASE_NAME=$(echo "$LATEST_RELEASE" | jq -r '.name')

          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "tag_name=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT

          echo "🔍 Release Information:"
          echo "  Tag: $RELEASE_TAG"
          echo "  Name: $RELEASE_NAME"
          echo "  Is Pre-release: $IS_PRERELEASE"

      - name: Skip pre-release deployment
        if: steps.release.outputs.is_prerelease == 'true'
        run: |
          echo "⏭️ Skipping production deployment for pre-release: ${{ steps.release.outputs.tag_name }}"
          echo "Pre-releases are automatically deployed to staging environment."
          exit 0

      - name: Deploy to Production
        if: steps.release.outputs.is_prerelease == 'false'
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ vars.PRODUCTION_HOST }}
          username: ${{ vars.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            echo "🚀 Starting Production deployment..."
            echo "Target: ${{ vars.PRODUCTION_HOST }}"
            echo "User: ${{ vars.PRODUCTION_USERNAME }}"
            echo "Release: ${{ steps.release.outputs.release_name }}"
            echo "Repository: ${{ github.repository }}"
            echo "Tag: ${{ steps.release.outputs.tag_name }}"
            echo "Commit: ${{ github.sha }}"
            echo "Deploy time: $(date)"

            # 确保目录存在
            sudo mkdir -p /opt/avatar-mgmt
            sudo chown $USER:$USER /opt/avatar-mgmt
            sudo chmod 755 /opt/avatar-mgmt

            cd /opt/avatar-mgmt

            # 检查并初始化 Git 仓库
            if [ ! -d ".git" ]; then
              echo " Git repository not found, cloning..."
              ssh-keyscan -H github.com >> ~/.ssh/known_hosts
              git clone git@github.com:${{ github.repository }}.git .
              if [ $? -ne 0 ]; then
                echo "❌ Failed to clone repository"
                exit 1
              fi
              echo "✅ Repository cloned successfully"
            else
              echo "📥 Git repository found, updating..."
              # 备份当前版本
              if git rev-parse HEAD >/dev/null 2>&1; then
                echo " Backing up current version..."
                git rev-parse HEAD > .backup-commit.txt
              fi
              
              # 拉取最新代码和标签
              echo "📥 Pulling latest code and tags..."
              git fetch --all --tags
              
              # 显示可用标签
              echo "🏷️ Available tags:"
              git tag -l | tail -5
              
              # 强制切换到指定标签（删除所有本地修改）
              echo "🔄 Force switching to tag: ${{ steps.release.outputs.tag_name }}"
              git checkout --force ${{ steps.release.outputs.tag_name }}
              
              # 验证当前状态
              echo "📊 Current git status:"
              git log --oneline -3
              echo "🏷️ Current tag: $(git describe --tags --exact-match 2>/dev/null || echo 'Not on exact tag')"
              
              # 清理生成的文件（保留配置文件）
              echo "🧹 Cleaning generated files..."
              git clean -fd frontend/ api-server/ scripts/ || true
            fi

            # 部署应用
            cd /opt/deploy-avatar

            echo "复制脚本文件..."

            if cp "/opt/avatar-mgmt/.github/scripts/copy_files_to_deploy.sh" .; then
                chmod +x copy_files_to_deploy.sh
                echo "✅ copy_files_to_deploy脚本文件复制完成"
            else
                echo "❌ copy_files_to_deploy脚本文件复制失败"
                exit 1
            fi

            if ./copy_files_to_deploy.sh; then
              echo "✅ 配置文件复制完成"
            else
              echo "❌ 配置文件复制失败"
              exit 1
            fi

            export GITHUB_REPOSITORY="${{ github.event.workflow_run.repository.full_name }}"
            export GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
            export GITHUB_ACTOR="${{ github.actor }}"
            export GITHUB_REF_NAME="${{ steps.release.outputs.tag_name }}"
            export GITHUB_SHA="${{ github.event.workflow_run.head_sha }}"
            export PRODUCTION_HOST="${{ vars.PRODUCTION_HOST }}"
            export IMAGE_TAG="${{ steps.release.outputs.tag_name }}"

            # 使用生产环境部署脚本
            ./deploy-ghcr.sh

            echo "🔍 Starting health check..."

            # 设置环境变量并执行健康检查脚本
            export DOCKER_COMPOSE_FILE="docker-compose.prod.yml"
            ./health-check.sh

            echo "✅ Production deployment completed!"

      - name: Notify deployment success
        if: success() && steps.release.outputs.is_prerelease == 'false'
        run: |
          echo "✅ Production deployment successful!"
          echo "Repository: ${{ github.event.workflow_run.repository.full_name }}"
          echo "Release: ${{ steps.release.outputs.release_name }}"
          echo "Tag: ${{ steps.release.outputs.tag_name }}"
          echo "Commit: ${{ github.event.workflow_run.head_sha }}"
          echo "Deploy time: $(date)"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          echo "Repository: ${{ github.event.workflow_run.repository.full_name }}"
          echo "Release: ${{ steps.release.outputs.release_name }}"
          echo "Tag: ${{ steps.release.outputs.tag_name }}"
          echo "Commit: ${{ github.event.workflow_run.head_sha }}"
          echo "Deploy time: $(date)"
          echo "Please check the deployment logs and fix the issue."
