# .github/workflows/deploy-production.yml
name: Deploy to Production
on:
  release:
    types: [published]

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    steps:
      - name: Get Release Info
        id: release
        run: |
          echo "tag_name=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
          echo "release_name=${{ github.event.release.name }}" >> $GITHUB_OUTPUT
          echo "release_body=${{ github.event.release.body }}" >> $GITHUB_OUTPUT

      - name: Deploy to Production
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ vars.PRODUCTION_HOST }}
          username: ${{ vars.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            echo "🚀 Starting Production deployment..."
            echo "Target: ${{ vars.PRODUCTION_HOST }}"
            echo "User: ${{ vars.PRODUCTION_USERNAME }}"
            echo "Release: ${{ steps.release.outputs.release_name }}"
            echo "Repository: ${{ github.repository }}"
            echo "Tag: ${{ steps.release.outputs.tag_name }}"
            echo "Commit: ${{ github.sha }}"
            echo "Deploy time: $(date)"

            # 确保目录存在
            sudo mkdir -p /opt/avatar-mgmt2
            sudo chown $USER:$USER /opt/avatar-mgmt2
            sudo chmod 755 /opt/avatar-mgmt2

            cd /opt/avatar-mgmt2

            # 检查并初始化 Git 仓库
            if [ ! -d ".git" ]; then
              echo " Git repository not found, cloning..."
              ssh-keyscan -H github.com >> ~/.ssh/known_hosts
              git clone git@github.com:${{ github.repository }}.git .
              if [ $? -ne 0 ]; then
                echo "❌ Failed to clone repository"
                exit 1
              fi
              echo "✅ Repository cloned successfully"
            else
              echo "📥 Git repository found, updating..."
              # 备份当前版本
              if git rev-parse HEAD >/dev/null 2>&1; then
                echo " Backing up current version..."
                git rev-parse HEAD > .backup-commit.txt
              fi
              
              # 拉取最新代码和标签
              echo "📥 Pulling latest code and tags..."
              git fetch --all --tags
              
              # 显示可用标签
              echo "🏷️ Available tags:"
              git tag -l | tail -5
              
              # 强制切换到指定标签（删除所有本地修改）
              echo "🔄 Force switching to tag: ${{ steps.release.outputs.tag_name }}"
              git checkout --force ${{ steps.release.outputs.tag_name }}
              
              # 验证当前状态
              echo "📊 Current git status:"
              git log --oneline -3
              echo "🏷️ Current tag: $(git describe --tags --exact-match 2>/dev/null || echo 'Not on exact tag')"
              
              # 清理生成的文件（保留配置文件）
              echo "🧹 Cleaning generated files..."
              git clean -fd frontend/ api-server/ scripts/ || true
            fi

            sudo chown -R $USER:$USER /opt/avatar-mgmt2

            # 检查配置文件
            if [ ! -f ".env.prod.api" ]; then
              echo "❌ Production config file not found!"
              echo "Please create .env.prod.api on the server"
              exit 1
            fi
            if [ ! -f ".env.prod.directus" ]; then
              echo "❌ Production config file not found!"
              echo "Please create .env.prod.directus on the server"
              exit 1
            fi

            # 确保 Volta 已安装并加载
            if ! command -v volta &> /dev/null; then
              echo " Installing Volta..."
              curl https://get.volta.sh | bash
              export VOLTA_HOME="$HOME/.volta"
              export PATH="$VOLTA_HOME/bin:$PATH"
            fi

            # 加载 Volta 环境
            export VOLTA_HOME="$HOME/.volta"
            export PATH="$VOLTA_HOME/bin:$PATH"

            # 安装项目指定的 Node.js 和 Yarn 版本
            echo " Installing Node.js and Yarn via Volta..."
            volta install node@22.16.0
            volta install yarn@1.22.22

            # 验证版本
            echo " Verifying versions..."
            node --version
            yarn --version

            # 设置环境变量并执行部署脚本
            echo "🔧 Setting up environment variables..."
            export PRODUCTION_HOST="${{ vars.PRODUCTION_HOST }}"
            export RELEASE_TAG="${{ steps.release.outputs.tag_name }}"
            export GITHUB_REPOSITORY="${{ github.repository }}"
            export GITHUB_SHA="${{ github.sha }}"

            # 执行部署脚本
            echo "🚀 Executing deployment script..."
            chmod +x .github/scripts/deploy-production.sh
            .github/scripts/deploy-production.sh

            echo "✅ Production deployment completed!"

      - name: Production health check
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ vars.PRODUCTION_HOST }}
          username: ${{ vars.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/avatar-mgmt2
            echo "🔍 Starting production health check..."

            # 设置环境变量并执行健康检查脚本
            export DOCKER_COMPOSE_FILE="docker-compose.prod.yml"
            chmod +x .github/scripts/health-check.sh
            .github/scripts/health-check.sh

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Production deployment successful!"
          echo "Repository: ${{ github.repository }}"
          echo "Tag: ${{ steps.release.outputs.tag_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deploy time: $(date)"
          echo "Release notes: ${{ steps.release.outputs.release_body }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Production deployment failed!"
          echo "Repository: ${{ github.repository }}"
          echo "Release: ${{ steps.release.outputs.release_name }}"
          echo "Tag: ${{ steps.release.outputs.tag_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deploy time: $(date)"
          echo "Please check the deployment logs and fix the issue."
