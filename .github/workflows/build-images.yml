# .github/workflows/build-images.yml
name: Build and Push Docker Images
on:
  push:
    branches: [main]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_API: ${{ github.repository }}/api
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.16.0'
          cache: 'yarn'

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate version information
        run: |
          chmod +x scripts/generate-version.sh
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "🚀 Release event detected, using production environment"
            ./scripts/generate-version.sh production
          else
            echo "🔧 Non-release event, using staging environment"
            ./scripts/generate-version.sh stage
          fi

          # 验证版本文件是否生成
          echo "📁 Checking generated version file..."
          ls -la api-server/version/
          cat api-server/version/version.json

      - name: Build frontend
        run: |
          cd frontend
          yarn install --frozen-lockfile

          # 构建前端 (不注入环境变量)
          yarn build --mode production

      - name: Prepare API build context
        run: |
          echo "🔧 准备 API 构建上下文..."
          # 复制前端文件到 api-server 目录
          cp -r frontend/public api-server/
          echo "✅ 已复制 frontend/public 到 api-server/"

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile
          push: ${{ github.event_name == 'push' || github.event_name == 'release' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:main
            ${{ github.event_name == 'release' && format('{0}/{1}/frontend:{2}', env.REGISTRY, env.IMAGE_NAME_FRONTEND, github.event.release.tag_name) || '' }}

      - name: Build and push API image
        uses: docker/build-push-action@v6
        with:
          context: api-server
          file: api-server/Dockerfile
          push: ${{ github.event_name == 'push' || github.event_name == 'release' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:main
            ${{ github.event_name == 'release' && format('{0}/{1}/api:{2}', env.REGISTRY, env.IMAGE_NAME_API, github.event.release.tag_name) || '' }}
          build-args: |
            BUILD_VERSION=${{ github.event_name == 'release' && github.event.release.tag_name || github.sha }}
            BUILD_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_started_at }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_BRANCH=${{ github.ref_name }}
            BUILD_RUN_ID=${{ github.run_id }}
            RELEASE_TAG=${{ github.event_name == 'release' && github.event.release.tag_name || 'none' }}

      - name: Generate build summary
        if: github.event_name == 'push' || github.event_name == 'release'
        run: |
          echo "## 🚀 Docker Images Built and Pushed to GHCR" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### API Image" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:main" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Frontend Image" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:main" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Info" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Time**: \`${{ github.run_started_at }}\`" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "- **Release Tag**: \`${{ github.event.release.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- **Release Name**: \`${{ github.event.release.name }}\`" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "```bash" >> $GITHUB_STEP_SUMMARY
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "# Pull release version" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.event.release.tag_name }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          echo "# Pull specific commit" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Pull latest" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_API }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "```" >> $GITHUB_STEP_SUMMARY

      - name: Build summary for PR
        if: github.event_name == 'pull_request'
        run: |
          echo "## 🔨 Docker Images Built (PR - Not Pushed)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "This is a PR build. Images are built but not pushed to GHCR." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Images will be pushed when PR is merged to main or when a release is created." >> $GITHUB_STEP_SUMMARY
