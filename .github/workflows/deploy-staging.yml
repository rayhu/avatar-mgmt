# .github/workflows/deploy-staging.yml
name: Deploy to Staging
on:
  push:
    branches: [main]

jobs:
  deploy-staging:
    # 只在推送到 main 或 PR 合并到 main 时执行
    if: github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to Staging
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ vars.STAGING_HOST }}
          username: ${{ vars.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            echo "🚀 Starting Staging deployment..."
            echo "Target: ${{ vars.STAGING_HOST }}"
            echo "User: ${{ vars.STAGING_USERNAME }}"
            echo "Repository: ${{ github.repository }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Commit: ${{ github.sha }}"
            echo "Deploy time: $(date)"

            # 确保目录存在
            sudo mkdir -p /opt/avatar-mgmt
            sudo chown $USER:$USER /opt/avatar-mgmt
            sudo chmod 755 /opt/avatar-mgmt

            cd /opt/avatar-mgmt

            # 检查并初始化 Git 仓库
            IS_FIRST_DEPLOY=false
            if [ ! -d ".git" ]; then
              echo " Git repository not found, cloning..."
              ssh-keyscan -H github.com >> ~/.ssh/known_hosts
              git clone git@github.com:${{ github.repository }}.git .
              if [ $? -ne 0 ]; then
                echo "❌ Failed to clone repository"
                exit 1
              fi
              echo "✅ Repository cloned successfully"
              IS_FIRST_DEPLOY=true
              echo "首次部署，将在最后执行 directus/setup-directus-permissions.js 脚本设置权限和导入数据"
            else
              echo "📥 Git repository found, updating..."
              # 备份当前版本
              if git rev-parse HEAD >/dev/null 2>&1; then
                echo " Backing up current version..."
                git rev-parse HEAD > .backup-commit.txt
              fi
              
              # 拉取最新代码
              echo "📥 Pulling latest code..."
              git fetch origin
              git reset --hard origin/main
              git clean -fd frontend/ api-server/ scripts/ || true
              echo "✅ Repository updated successfully"
            fi

            sudo chown -R $USER:$USER /opt/avatar-mgmt

            # 检查配置文件
            if [ ! -f ".env.stage.api" ]; then
              echo "❌ Staging config file not found!"
              echo "Please create .env.stage.api on the server"
              echo "You can copy from .env.stage.template if available"
              exit 1
            fi

            # 检查配置文件
            if [ ! -f ".env.stage.directus" ]; then
              echo "❌ Staging config file not found!"
              echo "Please create .env.stage.directus on the server"
              echo "You can copy from .env.stage.template if available"
              exit 1
            fi

            # 确保 Volta 已安装并加载
            if ! command -v volta &> /dev/null; then
              echo " Installing Volta..."
              sudo curl https://get.volta.sh | bash
              export VOLTA_HOME="$HOME/.volta"
              export PATH="$VOLTA_HOME/bin:$PATH"
            fi

            # 加载 Volta 环境
            export VOLTA_HOME="$HOME/.volta"
            export PATH="$VOLTA_HOME/bin:$PATH"

            # 安装项目指定的 Node.js 和 Yarn 版本
            echo " Installing Node.js and Yarn via Volta..."
            volta install node@22.16.0
            volta install yarn@1.22.22

            # 验证版本
            echo " Verifying versions..."
            node --version
            yarn --version

            # 设置环境变量并执行部署脚本
            echo "🔧 Setting up environment variables..."
            export STAGING_HOST="${{ vars.STAGING_HOST }}"
            export GITHUB_REPOSITORY="${{ github.repository }}"
            export GITHUB_REF_NAME="${{ github.ref_name }}"
            export GITHUB_SHA="${{ github.sha }}"

            # 执行部署脚本
            echo "🚀 Executing deployment script..."
            chmod +x .github/scripts/deploy-staging.sh
            .github/scripts/deploy-staging.sh

            # 如果是首次部署，执行 Directus 权限设置脚本
            if [ "$IS_FIRST_DEPLOY" = "true" ]; then
              echo "🚀 首次部署检测到，正在执行 Directus 权限设置脚本..."
              
              # 等待服务完全启动
              echo "⏳ 等待服务完全启动..."
              sleep 60
              
              # 检查 Directus 服务是否就绪
              echo "🔍 检查 Directus 服务状态..."
              if curl -f http://localhost:8055/ > /dev/null 2>&1; then
                echo "✅ Directus 服务已就绪，开始执行权限设置脚本..."
                
                # 安装 Node.js 依赖
                echo "📦 安装 Node.js 依赖..."
                cd directus
                npm install node-fetch
                
                # 执行权限设置脚本
                echo "🔧 执行权限设置脚本..."
                node setup-directus-permissions.js
                
                if [ $? -eq 0 ]; then
                  echo "✅ Directus 权限设置脚本执行成功！"
                else
                  echo "⚠️  Directus 权限设置脚本执行失败，请手动检查"
                fi
                
                cd ..
              else
                echo "❌ Directus 服务未就绪，跳过权限设置脚本"
                echo "⚠️  请手动执行: cd directus && node setup-directus-permissions.js"
              fi
            else
              echo "📝 非首次部署，跳过权限设置脚本"
            fi

      - name: Health check
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ vars.STAGING_HOST }}
          username: ${{ vars.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/avatar-mgmt
            echo "🔍 Starting health check..."

            # 设置环境变量并执行健康检查脚本
            export DOCKER_COMPOSE_FILE="docker-compose.stage.yml"
            chmod +x .github/scripts/health-check.sh
            .github/scripts/health-check.sh

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Staging deployment successful!"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deploy time: $(date)"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Staging deployment failed!"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deploy time: $(date)"
