# .github/workflows/deploy-staging.yml
name: Deploy to Staging
on:
  push:
    branches: [main]

jobs:
  deploy-staging:
    # Âè™Âú®Êé®ÈÄÅÂà∞ main Êàñ PR ÂêàÂπ∂Âà∞ main Êó∂ÊâßË°å
    if: github.event_name == 'push' || 
        (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    runs-on: ubuntu-latest
    steps:
        
      - name: Deploy to Staging
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ vars.STAGING_HOST }}
          username: ${{ vars.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            echo "üöÄ Starting Staging deployment..."
            echo "Target: ${{ vars.STAGING_HOST }}"
            echo "User: ${{ vars.STAGING_USERNAME }}"
            echo "Repository: ${{ github.repository }}"
            echo "Branch: ${{ github.ref_name }}"
            echo "Commit: ${{ github.sha }}"
            echo "Deploy time: $(date)"
            
            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            sudo mkdir -p /opt/avatar-mgmt
            sudo chown $USER:$USER /opt/avatar-mgmt
            sudo chmod 755 /opt/avatar-mgmt
            
            cd /opt/avatar-mgmt
            
            # Ê£ÄÊü•Âπ∂ÂàùÂßãÂåñ Git ‰ªìÂ∫ì
            if [ ! -d ".git" ]; then
              echo "ÔøΩÔøΩ Git repository not found, cloning..."
              ssh-keyscan -H github.com >> ~/.ssh/known_hosts
              git clone git@github.com:${{ github.repository }}.git .
              if [ $? -ne 0 ]; then
                echo "‚ùå Failed to clone repository"
                exit 1
              fi
              echo "‚úÖ Repository cloned successfully"
            else
              echo "üì• Git repository found, updating..."
              # Â§á‰ªΩÂΩìÂâçÁâàÊú¨
              if git rev-parse HEAD >/dev/null 2>&1; then
                echo " Backing up current version..."
                git rev-parse HEAD > .backup-commit.txt
              fi
              
              # ÊãâÂèñÊúÄÊñ∞‰ª£Á†Å
            echo "üì• Pulling latest code..."
              git fetch origin
              git reset --hard origin/main
              git clean -fd
              echo "‚úÖ Repository updated successfully"
            fi
            
            # ÁîüÊàêÁâàÊú¨‰ø°ÊÅØ
            echo "ÔøΩÔøΩ Generating version information..."
            chmod +x scripts/generate-version.sh
            ./scripts/generate-version.sh generate

            # Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂
            if [ ! -f ".env.stage.api" ]; then
              echo "‚ùå Staging config file not found!"
              echo "Please create .env.stage.api on the server"
              echo "You can copy from .env.stage.template if available"
              exit 1
            fi

            # Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂
            if [ ! -f ".env.stage.directus" ]; then
              echo "‚ùå Staging config file not found!"
              echo "Please create .env.stage.directus on the server"
              echo "You can copy from .env.stage.template if available"
              exit 1
            fi
            
            # ÈÉ®ÁΩ≤ÊúçÂä°
            echo "üê≥ Starting Docker services..."
            docker-compose -f docker-compose.stage.yml down
            docker-compose -f docker-compose.stage.yml up -d --build
            
            echo "‚úÖ Staging deployment completed!"
            
      - name: Health check
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ vars.STAGING_HOST }}
          username: ${{ vars.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/avatar-mgmt
            echo "üîç Starting health check..."
            
            # Á≠âÂæÖÊúçÂä°ÂêØÂä®
            echo "‚è≥ Waiting for services to start..."
            sleep 30
            
            # Ê£ÄÊü• Docker ÊúçÂä°Áä∂ÊÄÅ
            echo "üìä Docker services status:"
            docker-compose -f docker-compose.stage.yml ps
            
            # Ê£ÄÊü•ÊúçÂä°ÂÅ•Â∫∑Áä∂ÊÄÅ
            echo "üè• Checking service health..."
            
            # Ê£ÄÊü• API ÊúçÂä°
            if curl -f http://localhost:3000/health > /dev/null 2>&1; then
              echo "‚úÖ API service is healthy"
            else
              echo "‚ùå API service health check failed"
              exit 1
            fi
            
            # Ê£ÄÊü• Directus ÊúçÂä°
            if curl -f http://localhost:8055/ > /dev/null 2>&1; then
              echo "‚úÖ Directus service is healthy"
            else
              echo "‚ùå Directus service health check failed"
              exit 1
            fi
            
            # Ê£ÄÊü•Êï∞ÊçÆÂ∫ìÊúçÂä°
            if docker-compose -f docker-compose.stage.yml exec -T db pg_isready -U directus > /dev/null 2>&1; then
              echo "‚úÖ Database service is healthy"
            else
              echo "‚ùå Database service health check failed"
              exit 1
            fi
            
            echo "üéâ All services are healthy!"
            
      - name: Notify deployment success
        if: success()
        run: |
          echo "‚úÖ Staging deployment successful!"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deploy time: $(date)"
          
      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Staging deployment failed!"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "Deploy time: $(date)"
