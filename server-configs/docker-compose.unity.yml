# Docker Compose 配置 - Unity WebGL + Vue 全栈应用
version: '3.8'

services:
  # ============== 前端 + Unity WebGL 服务 ==============
  frontend:
    build:
      context: ../
      dockerfile: server-configs/Dockerfile
      target: production
    container_name: daidai-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - API_URL=http://api-server:3001
      - DIRECTUS_URL=http://directus:8055
    volumes:
      - ../frontend/dist:/app/frontend/dist:ro
      - ../frontend/public/unity_sample:/app/frontend/public/unity_sample:ro
      - logs:/app/logs
    networks:
      - daidai-network
    depends_on:
      - api-server
      - directus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`daidai.amis.hk`)"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  # ============== API 服务器 ==============
  api-server:
    build:
      context: ../api-server
      dockerfile: Dockerfile
    container_name: daidai-api
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DIRECTUS_URL=http://directus:8055
      - DIRECTUS_TOKEN=${DIRECTUS_TOKEN}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - AZURE_SPEECH_KEY=${AZURE_SPEECH_KEY}
      - AZURE_SPEECH_REGION=${AZURE_SPEECH_REGION}
      - DATABASE_URL=postgresql://directus:${DB_PASSWORD}@db:5432/directus
    volumes:
      - api-uploads:/app/uploads
      - logs:/app/logs
    networks:
      - daidai-network
    depends_on:
      - db
      - directus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============== Directus CMS ==============
  directus:
    image: directus/directus:11.8
    container_name: daidai-directus
    restart: unless-stopped
    ports:
      - "8055:8055"
    environment:
      - KEY=${DIRECTUS_KEY}
      - SECRET=${DIRECTUS_SECRET}
      - DB_CLIENT=pg
      - DB_HOST=db
      - DB_PORT=5432
      - DB_DATABASE=directus
      - DB_USER=directus
      - DB_PASSWORD=${DB_PASSWORD}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - PUBLIC_URL=https://directus.daidai.amis.hk
      - CORS_ENABLED=true
      - CORS_ORIGIN=https://daidai.amis.hk,http://localhost:5173
      - STORAGE_LOCATIONS=local
      - STORAGE_LOCAL_DRIVER=local
      - STORAGE_LOCAL_ROOT=./uploads
      - FILE_METADATA_ALLOW_LIST=icc,exif,iptc
      - ASSETS_CACHE_TTL=30d
      - ASSETS_TRANSFORM_MAX_CONCURRENT=4
    volumes:
      - directus-uploads:/directus/uploads
      - directus-database:/directus/database
    networks:
      - daidai-network
    depends_on:
      - db
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8055/server/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.directus.rule=Host(`directus.daidai.amis.hk`)"
      - "traefik.http.routers.directus.tls=true"
      - "traefik.http.services.directus.loadbalancer.server.port=8055"

  # ============== PostgreSQL 数据库 ==============
  db:
    image: postgres:15-alpine
    container_name: daidai-postgres
    restart: unless-stopped
    ports:
      - "54321:5432"  # 外部访问端口
    environment:
      - POSTGRES_USER=directus
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=directus
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - daidai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U directus -d directus"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=128MB
      -c effective_cache_size=256MB
      -c maintenance_work_mem=32MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # ============== Redis 缓存（可选）==============
  redis:
    image: redis:7-alpine
    container_name: daidai-redis
    restart: unless-stopped
    ports:
      - "63791:6379"
    volumes:
      - redis-data:/data
    networks:
      - daidai-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru

  # ============== Nginx 反向代理 ==============
  nginx:
    image: nginx:alpine
    container_name: daidai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-unity-webgl.conf:/etc/nginx/conf.d/default.conf:ro
      - ../frontend/dist:/var/www/daidai-frontend/dist:ro
      - ../frontend/public/unity_sample:/var/www/unity_sample:ro
      - ssl-certs:/etc/ssl/certs:ro
      - ssl-private:/etc/ssl/private:ro
      - nginx-logs:/var/log/nginx
    networks:
      - daidai-network
    depends_on:
      - frontend
      - api-server
      - directus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

# ============== 网络配置 ==============
networks:
  daidai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============== 数据卷配置 ==============
volumes:
  # 数据库数据
  postgres-data:
    driver: local
  
  # Redis 数据
  redis-data:
    driver: local
  
  # Directus 文件
  directus-uploads:
    driver: local
  directus-database:
    driver: local
  
  # API 服务器文件
  api-uploads:
    driver: local
  
  # 日志文件
  logs:
    driver: local
  nginx-logs:
    driver: local
  
  # SSL 证书
  ssl-certs:
    driver: local
  ssl-private:
    driver: local